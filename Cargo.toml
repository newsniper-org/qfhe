[package]
name = "qfhe"
version = "0.0.5"
edition = "2024"

[toolchain]
channel = "nightly"

[lib]
crate-type = ["cdylib"] # C-compatible dynamic library로 컴파일

[build-dependencies]
bindgen = "0.72.0"
cbindgen = "0.29.0"

[dependencies]
bincode = "1.3.3" # 바이너리 직렬화를 위해 추가
bytemuck = { version = "1.23.2", features = ["bytemuck_derive", "min_const_generics", "nightly_portable_simd", "nightly_stdsimd", "zeroable_atomics", "derive", "const_zeroed"] }
chacha20 = { version = "0.9.1", features = ["std", "zeroize"] }
crypto-bigint = { version = "0.6.1", features = ["alloc", "rand_core"] }
memmap2 = "0.9.7"
rand = "0.9.2"
rand_chacha = { version = "0.9.0", features = ["os_rng"] }
rand_core = { version = "0.9.3", features = ["os_rng", "serde", "std"] }
rand_distr = { version = "0.5.1", features = ["std_math"] }
rayon = "1.10.0"
serde = { version = "1.0.219", features = ["alloc", "derive", "serde_derive"] }
serde_json = { version = "1.0.142", features = ["preserve_order", "alloc", "raw_value"] }
serde_with = "3.14.0"

[target.'cfg(target_arch = "x86_64")'.dependencies]
bytemuck = { version = "1.23.2", features = ["bytemuck_derive", "min_const_generics", "nightly_portable_simd", "nightly_stdsimd", "zeroable_atomics", "derive", "const_zeroed", "avx512_simd"] }

[target.'cfg(target_arch = "aarch64")'.dependencies]
bytemuck = { version = "1.23.2", features = ["bytemuck_derive", "min_const_generics", "nightly_portable_simd", "nightly_stdsimd", "zeroable_atomics", "derive", "const_zeroed", "aarch64_simd"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
bytemuck = { version = "1.23.2", features = ["bytemuck_derive", "min_const_generics", "nightly_portable_simd", "nightly_stdsimd", "zeroable_atomics", "derive", "const_zeroed", "wasm_simd"] }
