# devutils/gen_ntt_params.py

import math

# ==============================================================================
# Helper Functions for Number Theory
# ==============================================================================

def power(base, exp, mod):
    """
    Calculates (base^exp) % mod efficiently.
    """
    res = 1
    base %= mod
    while exp > 0:
        if exp % 2 == 1:
            res = (res * base) % mod
        base = (base * base) % mod
        exp //= 2
    return res

def modInverse(n, mod):
    """
    Calculates the modular inverse of n under mod.
    Assumes mod is a prime number.
    """
    return power(n, mod - 2, mod)

def find_primitive_root(p):
    """
    Finds a primitive root for a prime p.
    """
    if p == 2:
        return 1
    phi = p - 1
    
    factors = set()
    d = 2
    temp_phi = phi
    while (d * d) <= temp_phi:
        if temp_phi % d == 0:
            factors.add(d)
            while temp_phi % d == 0:
                temp_phi //= d
        d += 1
    if temp_phi > 1:
        factors.add(temp_phi)

    for res in range(2, p + 1):
        is_primitive = True
        for factor in factors:
            if power(res, phi // factor, p) == 1:
                is_primitive = False
                break
        if is_primitive:
            return res
    return -1

def find_optimal_factors(n):
    """
    Finds n1, n2 such that n1 * n2 = n, n1 and n2 are powers of two,
    and they are as close to sqrt(n) as possible.
    """
    if (n & (n - 1) != 0) or n == 0:
        raise ValueError("N must be a power of two.")
    k = n.bit_length() - 1
    k1 = k // 2
    k2 = k - k1
    return 1 << k1, 1 << k2

# ==============================================================================
# Rust Code Generation
# ==============================================================================

def format_rust_array(name, arr, type="u64"):
    """
    Formats a Python list into a Rust static array string.
    """
    content = f"pub const {name}: [{type}; {len(arr)}] = [\n"
    for i, val in enumerate(arr):
        content += f"    {val}u64,"
        if (i + 1) % 8 == 0:
            content += "\n"
    if not content.endswith("\n"):
        content += "\n"
    content += "];\n"
    return content

def generate_ntt_tables_for_params(params):
    """
    Generates all necessary NTT tables and constants for a given set of parameters.
    """
    N = params["N"]
    Q_BASIS = params["Q_BASIS"]
    
    all_code = ""
    for i, q in enumerate(Q_BASIS):
        root = find_primitive_root(q)
        w_primitive = power(root, (q - 1) // (2 * N), q) # For Quaternion NTT
        w_inv_primitive = modInverse(w_primitive, q)

        all_code += f"// Constants for Q_BASIS[{i}] = {q}\n"
        all_code += f"pub const W_PRIMITIVE_{i}: u64 = {w_primitive};\n"
        all_code += f"pub const W_INV_PRIMITIVE_{i}: u64 = {w_inv_primitive};\n\n"

        n1, n2 = find_optimal_factors(N)
        
        # LUTs for standard NTT (not Cooley-Tukey Radix-4 specific)
        twiddle_lut = [power(w_primitive, j, q) for j in range(N)]
        inv_twiddle_lut = [power(w_inv_primitive, j, q) for j in range(N)]
        
        all_code += format_rust_array(f"TWIDDLE_LUT_{i}", twiddle_lut)
        all_code += format_rust_array(f"INV_TWIDDLE_LUT_{i}", inv_twiddle_lut)
        all_code += "\n"
        
    return all_code

# ==============================================================================
# Main Execution
# ==============================================================================

if __name__ == "__main__":
    # Parameters mirroring src/core/rns/mod.rs
    
    PARAMS_2048_L128 = {
        "N": 2048,
        "Q_BASIS": [36028797018963969, 35184371884033],
    }
    
    PARAMS_4096_L192 = {
        "N": 4096,
        "Q_BASIS": [288230376151748609, 288230376152698881, 288230376154009601, 288230376154501121],
    }

    PARAMS_8192_L256 = {
        "N": 8192,
        "Q_BASIS": [
            288230376151748609, 288230376152698881, 288230376154009601, 288230376154501121, 
            288230376154566657, 288230376155287553, 288230376155779073, 288230376156172289
        ],
    }

    rust_file_content = "// Automatically generated by devutils/gen_ntt_params.py\n"
    rust_file_content += "// DO NOT EDIT MANUALLY.\n\n"
    rust_file_content += "#![allow(clippy::all)]\n\n"
    
    rust_file_content += "pub mod n2048 {\n"
    rust_file_content += generate_ntt_tables_for_params(PARAMS_2048_L128)
    rust_file_content += "}\n\n"
    
    rust_file_content += "pub mod n4096 {\n"
    rust_file_content += generate_ntt_tables_for_params(PARAMS_4096_L192)
    rust_file_content += "}\n\n"

    rust_file_content += "pub mod n8192 {\n"
    rust_file_content += generate_ntt_tables_for_params(PARAMS_8192_L256)
    rust_file_content += "}\n"

    output_path = "src/core/consts/ntt_tables.rs"
    try:
        with open(output_path, "w") as f:
            f.write(rust_file_content)
        print(f"Successfully generated NTT tables at: {output_path}")
    except IOError as e:
        print(f"Error writing to file {output_path}: {e}")
